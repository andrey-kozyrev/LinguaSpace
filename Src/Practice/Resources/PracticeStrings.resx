<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PASSWORD_PROFILE" xml:space="preserve">
    <value>{4AEA9869-B312-4177-BDBB-3088F0410C5D}</value>
  </data>
  <data name="PASSWORD_VOCABULARY" xml:space="preserve">
    <value>{F87B1C75-0486-4cec-ACBC-7B158DD75B4B}</value>
  </data>
  <data name="SQL_ANSWERS_DEFINITION" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Definition
FROM Meanings AS m INNER JOIN Words AS w ON m.WordId = w.WordId
WHERE w.TypeId = @TypeId AND m.MeaningId &gt; @SeedId AND m.SyncLive = 1 AND m.Definition IS NOT NULL AND LEN(m.Definition) &gt; 0</value>
  </data>
  <data name="SQL_ANSWERS_RELATIONS" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, rw.Prefix, rw.Word, m.Postfix AS UsagePostfix
FROM Words AS rw INNER JOIN Relations AS r ON rw.WordId = r.WordId 
INNER JOIN Meanings AS m ON r.MeaningId = m.MeaningId
INNER JOIN Words AS w ON m.WordId = w.WordId
WHERE w.TypeId = @TypeId AND m.MeaningId &gt; @SeedId AND r.SyncLive = 1 AND m.SyncLive = 1 AND w.SyncLive = 1
ORDER BY m.MeaningId, r.Relation, r.Position</value>
  </data>
  <data name="SQL_ANSWERS_TRANSLATIONS" xml:space="preserve">
    <value>SELECT m.MeaningId, t.Translation
FROM Translations AS t INNER JOIN Meanings AS m ON t.MeaningId = m.MeaningId
INNER JOIN Words AS w ON m.WordId = w.WordId
WHERE w.TypeId = @TypeId AND m.MeaningId &gt; @SeedId AND t.SyncLive = 1 AND m.SyncLive = 1 AND w.SyncLive = 1
ORDER BY m.MeaningId, t.Position</value>
  </data>
  <data name="SQL_ANSWERS_WORD" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, w.Prefix, w.Word, m.Postfix AS UsagePostfix
FROM Meanings AS m INNER JOIN Words AS w ON m.WordId = w.WordId
WHERE w.TypeId = @TypeId AND m.MeaningId &gt; @SeedId AND m.SyncLive = 1</value>
  </data>
  <data name="SQL_ANSWER_ANTONYMS" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, rw.Prefix, rw.Word, m.Postfix AS UsagePostfix
FROM Meanings AS m INNER JOIN Relations AS r ON m.MeaningId = r.MeaningId 
		   INNER JOIN Words AS rw ON r.WordId = rw.WordId
WHERE m.MeaningId = @MeaningId AND r.Relation = 'A' AND r.SyncLive = 1
ORDER BY r.Position</value>
  </data>
  <data name="SQL_ANSWER_DEFINITION" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Definition
FROM Meanings AS m
WHERE m.MeaningId = @MeaningId AND m.SyncLive = 1 AND m.Definition IS NOT NULL AND LEN(m.Definition) &gt; 0</value>
  </data>
  <data name="SQL_ANSWER_SYNONYMS" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, rw.Prefix, rw.Word, m.Postfix AS UsagePostfix
FROM Meanings AS m INNER JOIN Relations AS r ON m.MeaningId = r.MeaningId 
		   INNER JOIN Words AS rw ON r.WordId = rw.WordId
WHERE m.MeaningId = @MeaningId AND r.Relation = 'S' AND r.SyncLive = 1
ORDER BY r.Position</value>
  </data>
  <data name="SQL_ANSWER_TRANSLATIONS" xml:space="preserve">
    <value>SELECT m.MeaningId,  t.Translation 
FROM Meanings AS m INNER JOIN Translations AS t ON m.MeaningId = t.MeaningId
WHERE m.MeaningId = @MeaningId AND t.SyncLive = 1
ORDER BY t.Position</value>
  </data>
  <data name="SQL_ANSWER_WORD" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, w.Prefix, w.Word, m.Postfix AS UsagePostfix
FROM Meanings AS m INNER JOIN Words AS w ON m.WordId = w.WordId
WHERE m.MeaningId = @MeaningId</value>
  </data>
  <data name="SQL_HISTORY" xml:space="preserve">
    <value>SELECT h.MeaningId, SUM(365000 * a.Weight / (1 + ABS(DATEDIFF(d, h.SyncMod, GETDATE())))) AS Score
FROM History AS h
INNER JOIN Actions AS a ON h.ActionId = a.ActionId 
WHERE (h.VocabularyId = @Vocabularyid) AND (h.SyncMod &gt; @SyncMod)
GROUP BY h.MeaningId
ORDER BY Score DESC</value>
  </data>
  <data name="SQL_MEANING_CHECK" xml:space="preserve">
    <value>SELECT COUNT(*) 
FROM Meanings AS m
WHERE m.MeaningId = @MeaningId AND SyncLive = 1</value>
  </data>
  <data name="SQL_QUESTION_DEFINITION" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Definition, m.Example
FROM Meanings AS m
WHERE m.MeaningId = @MeaningId AND m.SyncLive = 1</value>
  </data>
  <data name="SQL_QUESTION_TRANSLATIONS" xml:space="preserve">
    <value>SELECT m.MeaningId, t.Translation, m.Example
FROM Meanings AS m INNER JOIN Translations AS t ON m.MeaningId = t.MeaningId
WHERE m.MeaningId = @MeaningId AND t.SyncLive = 1 AND m.SyncLive = 1</value>
  </data>
  <data name="SQL_QUESTION_WORD" xml:space="preserve">
    <value>SELECT m.MeaningId, m.Prefix AS UsagePrefix, w.Prefix, w.Word, m.Example, m.Postfix AS UsagePostfix
FROM Words AS w INNER JOIN Meanings AS m ON w.WordId = m.WordId
WHERE m.MeaningId = @MeaningId AND m.SyncLive = 1</value>
  </data>
  <data name="SQL_SELECT_HISTORY" xml:space="preserve">
    <value>SELECT SUM(365000 * a.Weight / (1 + ABS(DATEDIFF(d, h.SyncMod, GETDATE())))) AS Score
FROM History AS h
INNER JOIN Actions AS a ON h.ActionId = a.ActionId
WHERE (h.MeaningId = @MeaningId)
GROUP BY h.MeaningId</value>
  </data>
  <data name="SQL_SELECT_MEANINGS" xml:space="preserve">
    <value>SELECT m.MeaningId
FROM Meanings AS m
WHERE m.SyncLive = 1
ORDER BY m.SyncMod DESC</value>
  </data>
  <data name="SQL_TYPE_ID" xml:space="preserve">
    <value>SELECT w.TypeId 
FROM Words AS w INNER JOIN Meanings AS m ON w.WordId = m.WordId
WHERE m.MeaningId = @MeaningId</value>
  </data>
  <data name="SQL_UPDATE_HISTORY" xml:space="preserve">
    <value>INSERT INTO History (VocabularyId, MeaningId, ActionId)
VALUES (@VocabularyId, @MeaningId, @ActionId)</value>
  </data>
  <data name="SQL_VOCABULARY_ID" xml:space="preserve">
    <value>SELECT v.VocabularyId 
FROM Vocabularies AS v</value>
  </data>
</root>